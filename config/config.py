import json
from typing import Optional
from pydantic_settings import BaseSettings
from typing import Optional, List, Dict
from pydantic import Field, SecretStr, BaseModel, field_validator
import logging
from pathlib import Path

class TarotCard(BaseModel):
    name: str
    key_words: str
    meaning: str
    image_url: Optional[str] = None
    description: Optional[str] = None

class Settings(BaseSettings):
    
    TELEGRAM_BOT_TOKEN: SecretStr = Field(None, env="TELEGRAM_BOT_TOKEN")
    
    GIGACHAT_CREDENTIALS: SecretStr = Field(None, env="GIGACHAT_CREDENTIALS")

    TAROT_DECK: List[TarotCard] = Field(
        default=[
            {
                "name": "0. –®—É—Ç ÔøΩ",
                "key_words": "–ù–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è, —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å, –Ω–µ–≤–∏–Ω–Ω–æ—Å—Ç—å",
                "meaning": "–í–æ—Ç —Ç—ã —Å—Ç–æ–∏—à—å –Ω–∞ –∫—Ä–∞—é –æ–±—Ä—ã–≤–∞. –ù—É —á–æ, –ø—Ä—ã–≥–∞–µ–º? ü§™"
            }
        ],
        description="–ö–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç –¢–∞—Ä–æ —Å –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"
    )

    @field_validator('TAROT_DECK', mode='before')
    @classmethod
    def load_tarot_from_json(cls, v, info):
        json_path = Path('config/tarot_cards.json')
        if json_path.exists():
            try:
                with open(json_path, 'r', encoding='utf-8') as f:
                    cards = json.load(f)
                    if isinstance(cards, list):
                        return cards
                    logging.warning("JSON —Ñ–∞–π–ª —Å –∫–∞—Ä—Ç–∞–º–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ tarot_cards.json: {e}")
        
        # –ï—Å–ª–∏ JSON –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        return v


logging.basicConfig(
    level=logging.INFO,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()         # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = Settings()